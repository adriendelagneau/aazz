generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum Role {
  USER
  ADMIN
}

enum AssetType {
  IMAGE
  VIDEO
  AUDIO
}

//
// User & Authentication
//
model User {
  id                   String   @id @default(uuid())
  email                String   @unique
  name                 String?
  role                 Role     @default(USER)
  emailVerified        Boolean
  image                String?
  stripeCustomerId     String? // ðŸ‘ˆ add this line
  bookmarkedArticleIds String[] @default([])
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  sessions Session[]
  accounts Account[]

  subscriptions Subscription[]

  articleViews ArticleView[]

  author Author?

  notificationPreferences NotificationPreference[]
  notifications           Notification[]

  @@map("user")
}

model Author {
  id          String       @id @default(uuid())
  slug        String       @unique
  name        String
  bio         String?
  image       String?
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id]) // FK on Author side
  articles    Article[]    @relation("AuthorArticles")
  videoShorts VideoShort[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

//
// Content Models
//
model Article {
  id                   String   @id @default(uuid())
  title                String
  slug                 String   @unique
  excerpt              String?
  published            Boolean  @default(true)
  publishedAt          DateTime @default(now())
  bookmarkedArticleIds String[] @default([])
  views                Int      @default(0)
  isBreaking           Boolean  @default(false) // âœ… Add this
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  authorId String
  author   Author @relation("AuthorArticles", fields: [authorId], references: [id], onDelete: Cascade)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  assetId String? @unique
  asset   Asset?  @relation("ArticleAssetRelation", fields: [assetId], references: [id])

  parts        ArticlePart[]
  ArticleTag   ArticleTag[]
  articleViews ArticleView[]

  @@map("article")
}

model ArticleView {
  id        String  @id @default(uuid())
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  // Either user or visitor
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  visitorId String? // For anonymous users (hashed fingerprint)
  viewedAt  DateTime @default(now())

  @@index([visitorId])
  @@index([userId])
  @@index([articleId, viewedAt])
}

model ArticlePart {
  id         String      @id @default(uuid())
  title      String?
  order      Int
  articleId  String
  article    Article     @relation(fields: [articleId], references: [id], onDelete: Cascade)
  paragraphs Paragraph[]
}

model Paragraph {
  id            String      @id @default(uuid())
  content       String
  order         Int
  articlePartId String
  articlePart   ArticlePart @relation(fields: [articlePartId], references: [id], onDelete: Cascade)
}

model Asset {
  id      String    @id @default(uuid())
  type    AssetType
  url     String
  legend  String?
  altText String?

  article    Article?    @relation("ArticleAssetRelation")
  videoShort VideoShort? @relation("VideoShortAssetRelation")
}

//
// Taxonomy
//
model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String    @unique
  articles Article[]
}

model Tag {
  id       String       @id @default(uuid())
  name     String       @unique
  slug     String       @unique
  articles ArticleTag[]
}

model ArticleTag {
  articleId String
  tagId     String

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([articleId, tagId])
}

//
// Payments
//
model Subscription {
  id                   String   @id @default(uuid())
  stripeCustomerId     String
  stripeSubscriptionId String
  status               String
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VideoShort {
  id          String   @id @default(uuid())
  title       String
  description String?
  duration    Int? // in seconds
  views       Int      @default(0)
  published   Boolean  @default(true)
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  assetId String @unique
  asset   Asset  @relation("VideoShortAssetRelation", fields: [assetId], references: [id], onDelete: Cascade)
}

// Notifications

enum NotificationChannel {
  EMAIL
  SMS
  IN_APP
}

// Notification model to store user notifications
model Notification {
  id        String              @id @default(uuid())
  userId    String
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String // short title or headline
  message   String // detailed message
  isRead    Boolean             @default(false)
  channel   NotificationChannel @default(IN_APP) // how user should receive it
  createdAt DateTime            @default(now())
  sentAt    DateTime? // when notification was sent, optional
  metadata  Json? // optional extra info (like articleId, link, etc)

  @@index([userId, isRead])
}

model NotificationPreference {
  id      String              @id @default(uuid())
  userId  String
  user    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel NotificationChannel
  enabled Boolean             @default(true)

  @@unique([userId, channel])
}
